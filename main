# ==========================================
#  Author: Thomas Copo
#  Date: 14/4/2021
#  Purpose: To create a ray cast!!!!
# ==========================================

import raylibpy as raylib
import random
import math

# Create window and set the target fps
width, height = 1280, 720
raylib.init_window(width, height, 'Ray Casting')
raylib.set_target_fps(60)

# Magnitude and Normalize Function
mag = lambda x, y: math.sqrt((x * x) + (y * y))
def normalize(x, y):
   a = mag(x, y)
   x /= a
   y /= a
   return x, y

# ==========================================
# ================= Classes ================
# ==========================================
class Vector2:
   def __init__(self, x=0, y=0):
      self.x = x
      self.y = y

   def distance(self, a, b):
      return math.sqrt((b.x - a.x) ** 2 + (b.y - a.y) ** 2)

class Boundary:
   def __init__(self, x1, y1, x2, y2):
      self.a = Vector2(x1, y1)   # Point a position
      self.b = Vector2(x2, y2)   # Point b position

   def draw(self, color):
      raylib.draw_line(self.a.x, self.a.y, self.b.x, self.b.y, color)

class Ray:
   def __init__(self, pos, angle):
      self.pos = pos
      self.dir = Vector2()
      self.dir.x, self.dir.y = math.sin(angle), math.cos(angle)

   def lookAt(self, x, y):
      self.dir.x = x - self.pos.x
      self.dir.y = y - self.pos.y
      self.dir.x, self.dir.y = normalize(self.dir.x, self.dir.y)

   def draw(self, color):
      raylib.draw_line(self.pos.x, self.pos.y, self.pos.x + self.dir.x * 10, self.pos.y + self.dir.y * 10, color)

   def cast(self, boundary):
      x1 = boundary.a.x  # Point a x-coord
      y1 = boundary.a.y  # Point a y-coord
      x2 = boundary.b.x  # Point b x-coord
      y2 = boundary.b.y  # Point b y-coord

      x3 = self.pos.x    # Start x-coord of ray
      y3 = self.pos.y    # Start y-coord of ray
      x4 = self.pos.x + self.dir.x  # End x-coord of ray
      y4 = self.pos.y + self.dir.y  # End y-coord of rat

      den = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4)
      # Lines are parallel
      if den == 0:
         return

      t = ((x1 - x3) * (y3 - y4) - (y1 - y4) * (x3 - x4)) / den
      u = -((x1 - x2) * (y1 - y3) - (y1 - y2) * (x1 - x3)) / den
      if 0 < t < 1 and u > 0:
         pt = Vector2()
         pt.x = x1 + t * (x2 - x1)
         pt.y = y1 + t * (y2 - y1)
         return pt
      else:
         return

class Particle:
   def __init__(self, increment):
      self.pos = Vector2(200, 200)
      self.rays = []
      for angle in range(0, 360, increment):
         self.rays.append(Ray(self.pos, math.radians(angle / 1)))

   def draw(self):
      raylib.draw_circle(self.pos.x, self.pos.y, 4, raylib.GREEN)
      for ray in self.rays:
         ray.draw(raylib.GREEN)

   def update(self, x, y):
      self.pos.x = x
      self.pos.y = y

   def look(self, boundaries):
      #for ray in self.rays:
      for i in range(len(self.rays)):
         ray = self.rays[i]
         closest = None
         record = math.inf
         for boundary in boundaries:
            pt = ray.cast(boundary)
            if pt :
               d = Vector2().distance(self.pos, pt)
               if d < record:
                  record = d
                  closest = pt

         if closest:
            raylib.draw_line(self.pos.x, self.pos.y, closest.x, closest.y, raylib.GREEN)
         else:
            raylib.draw_line(self.pos.x, self.pos.y,
                             10000 * ray.dir.x + self.pos.x, 10000 * ray.dir.y + self.pos.y,
                             raylib.GREEN)



walls = []
particle = Particle(1)
def createWalls(wallAmt):
   for wall in walls:
      walls.remove(wall)

   for i in range(wallAmt):
      x1 = random.randint(0, width)
      x2 = random.randint(0, width)
      y1 = random.randint(0, height)
      y2 = random.randint(0, height)
      walls.append(Boundary(x1, y1, x2, y2))


while not raylib.window_should_close():
   raylib.begin_drawing()
   raylib.clear_background(raylib.BLACK)
   raylib.draw_fps(10, 10)

   if raylib.is_key_down(raylib.KEY_R):
      createWalls(3)

   for wall in walls:
      wall.draw(raylib.GREEN)

   particle.draw()
   particle.look(walls)
   particle.update(raylib.get_mouse_x(), raylib.get_mouse_y())

   raylib.draw_fps(10, 10)
   raylib.end_drawing()

raylib.close_window()
